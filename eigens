#spoiler: it solves only 3x3 matrices, i'm sorry
import math
def input_matrix():
    print("Enter matrix")
    matrix = []
    for _ in range(3):
        row = list(map(float, input().strip().split()))
        matrix.append(row)
    return matrix
def determinant(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    return a*(e*i - f*h) - b*(d*i - f*g) + c*(d*h - e*g)

def characteristic_polynomial(matrix):
    trace = matrix[0][0] + matrix[1][1] + matrix[2][2]
    A_squared = [
        [
            sum(matrix[i][k] * matrix[k][j] for k in range(3))
            for j in range(3)
        ]
        for i in range(3)
    ]
    trace_A_squared = A_squared[0][0] + A_squared[1][1] + A_squared[2][2]
    
    a = -trace
    b = (trace**2 - trace_A_squared) / 2
    c = -determinant(matrix)
    
    return [1, a, b, c]

def solve_cubic(coeffs):
    a, b, c = coeffs[1], coeffs[2], coeffs[3]
    p = b - (a**2)/3
    q = (2*a**3)/27 - (a*b)/3 + c
    delta = (q**2)/4 + (p**3)/27
    if delta > 0:
        u = (-q/2 + math.sqrt(delta))**(1/3)
        v = (-q/2 - math.sqrt(delta))**(1/3)
        y1 = u + v
        roots = [y1 - a/3]
    elif delta == 0:
        y1 = 3*q/p
        y2 = -3*q/(2*p)
        roots = [y1 - a/3, y2 - a/3, y2 - a/3]
    else:
        theta = math.acos((-q/2) / math.sqrt(-(p**3)/27))
        y1 = 2 * math.sqrt(-p/3) * math.cos(theta/3)
        y2 = 2 * math.sqrt(-p/3) * math.cos((theta + 2*math.pi)/3)
        y3 = 2 * math.sqrt(-p/3) * math.cos((theta + 4*math.pi)/3)
        roots = [y1 - a/3, y2 - a/3, y3 - a/3]
    
    return roots

def find_eigenvectors(matrix, eigenvalues):
    eigenvectors = []
    for lambda_ in eigenvalues:
        A_minus_lambda_I = [
            [matrix[i][j] - (lambda_ if i == j else 0) for j in range(3)]
            for i in range(3)
        ]
        try:
            a, b, c = A_minus_lambda_I[0]
            d, e, f = A_minus_lambda_I[1]
            det = a*e - b*d
            if det != 0:
                v1 = (b*f - c*e) / det
                v2 = (c*d - a*f) / det
                eigenvector = [v1, v2, 1.0]
            else:
                eigenvector = [1.0, - (a + c)/(b + 1e-10), 1.0]
        except:
            eigenvector = [1.0, 1.0, 1.0] 
        eigenvectors.append(eigenvector)
    return eigenvectors


matrix = input_matrix()
coeffs = characteristic_polynomial(matrix)
eigenvalues = solve_cubic(coeffs)
print("\neigenvalues")
for i, val in enumerate(eigenvalues):
    print(f"lamda_{i+1} = {val:.4f}")
eigenvectors = find_eigenvectors(matrix, eigenvalues)
print("\neigenvectors")
for i, vec in enumerate(eigenvectors):
    print(f"v{i+1} = {[f'{x:.4f}' for x in vec]}")
